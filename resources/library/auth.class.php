<?php
/**
 * Class Auth
 * Provides the necessary methods for user Authentication
 */
class auth
{
    /**
     * 
     * @param object $oService
     * 
     * Required to obtain the Phpfox user info
     * from the Phpfox database during login
     */
    function __construct($oService, $aConf)
    {
        $this->_messages='';
        $this->sPhrases='';
        $this->_fullname='';
        $this->oService=$oService;
        $this->_Conf=$aConf;

        if(!isset($_SESSION))
        {
             $this->sec_session_start();
        }
    }
    
    /** 
     * 
     * customized session_start()
     */
    function sec_session_start() 
    {
        $session_name = 'pantry_session_id';   // Set a custom session name
        $secure = SECURE;
        // This stops JavaScript being able to access the session id.
        $httponly = true;
        // Forces sessions to only use cookies.
        if (ini_set('session.use_only_cookies', 1) === FALSE) 
        {
            header("Location: ../error.php?err=Could not initiate a safe session (ini_set)");
            exit();
        }
        //print_r(get_defined_constants());
        // Gets current cookies params.
        $cookieParams = session_get_cookie_params();
        session_set_cookie_params($cookieParams["lifetime"],
            '/',    
            $cookieParams["domain"], 
            $secure,
            $httponly);

        // Sets the session name to the one set above.
        session_name($session_name);
        session_start();            // Start the PHP session 
        session_regenerate_id(true);    // regenerated the session, delete the old one. 
    }
    
    /**
     * 
     * @param array $aPhrases
     * for footer listing
     * 
     */
    function setLang($aPhrases)
    {
        $this->aPhrases=$aPhrases;
    }

    /**
     * 
     * @return boolean
     */
    function isExpired()
    {
        // Set session timelimit to 60 minutes
        if(isset($_SESSION['user_id']) && time()-$_SESSION['cpr_last_activity'] > $this->oService->getConfigSetting('sess_timeout'))
        {
            $this->logout();
            return true;
        }
        elseif(isset($_SESSION['user_id']))
        {
            $this->refreshSession();
            return false;
        }
        else
        {
            return true;
        }
    }

    /**
     * Resets the last activity time in the session var
     */
    function refreshSession()
    {
        $_SESSION['cpr_last_activity']=time();
    }

    /**
     * 
     * @return string
     * Result contains all messages generated by this class.
     */
    function getMessages()
    {
        return $this->_messages;
    }
    
    /**
     * 
     * @param string $email
     * @param string $sPassword
     * @return boolean
     */

    function login($email, $sPassword) 
    {
        $aUser = $this->oService->getFoxUser($email);

        if(empty($aUser['user_image']))
        {
            $aUser['image_path']=PHPFOX_CPR_BASEURL."img/layout/noprofile.png";
        }
        else
        {
//            $aUser['image_path']=defined('V4')?"http://".PHPFOX_BASEURL."PF.Base/file/pic/user/".sprintf($aUser['user_image'],'_50'):"http://".PHPFOX_BASEURL."file/pic/user/".sprintf($aUser['user_image'],'_50'); 
        }
        
        if ($this->oService->checkbrute($aUser['user_id']) == true) 
        {
            $this->_messages .= "Brute force lockout is active";
            return false;
        }
        elseif($aUser['user_id'] > 0)
        {
            
		$bConfirmed = false;
		if (strlen($aUser['password']) > 32) 
		{
			if (function_exists('password_verify') && password_verify($sPassword, $aUser['password'])) 
			{
				$bConfirmed=true;
			}
		}
		else 
		{
			if ($aUser['password'] == md5(md5($sPassword).md5($aUser['password_salt'])))
			{
				$bConfirmed=true;
			}
		}
		if(!$bConfirmed)
		{
			$this->_messages .= $this->aPhrases['MESSAGES_LOGIN_INCORRECT'];
			//return 'Failed check'; 
		}

//            $sPasswordTest=md5(md5($sPassword).md5($aUser['password_salt']));

            if ($bConfirmed)
            {
                // Password is correct!
                // Get the user-agent string of the user.

                if (filter_has_var(INPUT_SERVER, 'HTTP_USER_AGENT')) 
                {
                    $user_browser = filter_input(INPUT_SERVER, 'HTTP_USER_AGENT',
                    FILTER_UNSAFE_RAW, FILTER_NULL_ON_FAILURE);
                } 
                elseif (isset($_SERVER['HTTP_USER_AGENT'])) 
                {
                    $user_browser = filter_var($_SERVER['HTTP_USER_AGENT'],
                    FILTER_UNSAFE_RAW, FILTER_NULL_ON_FAILURE);
                }
                else 
                {
                    $user_browser = null;
                }
                
                $user_id = preg_replace("/[^0-9]+/", "", $aUser['user_id']);
                $email = preg_replace("/[^a-zA-Z0-9_\-@\.]+/", "", $aUser['email']);
                $_SESSION['user_id'] = $user_id;
                $_SESSION['email'] = $email;
                $_SESSION['full_name'] = $aUser['full_name'];
                $_SESSION['image_path'] = $aUser['image_path'];
                $_SESSION['login_string'] = hash('sha512', $aUser['password'] . $user_browser);
                $this->refreshSession();
                // Login successful.
                $this->oService->setLoginData($aUser['user_id']);
                return true;
            } 
            else 
            {
                $this->oService->setLoginAttempt($aUser['user_id']);
                return false;
            }

        } 
        else 
        {
            // No user exists.
            $this->_messages .= "Phpfox user does not exist";
            $this->oService->setLoginAttempt($aUser['user_id']);
            return false;
        }
    }


    /**
     * Logout removes session
     * 
     * @return boolean
     */
    function logout()
    {
        // Unset all session values 
        $_SESSION = array();
 
        // get session parameters 
        $params = session_get_cookie_params();

        // Delete the actual cookie. 
        setcookie(session_name(),
                '', time() - 42000, 
                $params["path"], 
                $params["domain"], 
                $params["secure"], 
                $params["httponly"]);

        // Destroy session 
        session_destroy();
        
            return true; 
    }

    /**
     * 
     * @return boolean
     * rechecks login info
     * logsout if no longer valid
     */
    function login_check() 
    {
        // Check if all session variables are set 
        if (isset($_SESSION['user_id'], $_SESSION['email'], $_SESSION['login_string'])) 
        {
            //$user_id = $_SESSION['user_id'];
            $login_string = $_SESSION['login_string'];
            $email = $_SESSION['email'];

            // Get the user-agent string of the user.
            //$user_browser = filter_input($_SERVER['HTTP_USER_AGENT']);
            
            if (filter_has_var(INPUT_SERVER, 'HTTP_USER_AGENT')) 
            {
                $user_browser = filter_input(INPUT_SERVER, 'HTTP_USER_AGENT',
                FILTER_UNSAFE_RAW, FILTER_NULL_ON_FAILURE);
            } 
            elseif (isset($_SERVER['HTTP_USER_AGENT'])) 
            {
                $user_browser = filter_var($_SERVER['HTTP_USER_AGENT'],
                FILTER_UNSAFE_RAW, FILTER_NULL_ON_FAILURE);
            }
            else 
            {
                $user_browser = null;
            }
            
            if($aUser = $this->oService->getFoxUser($email)) 
            {
                if(!$this->isExpired()) 
                {
                    $login_check = hash('sha512', $aUser['password'] . $user_browser);
//echo $login_check . "<br />" . $login_string;
                        if ($login_check == $login_string) {
                            // Logged In!!!! 
                            $this->refreshSession();
                            return true;
                        } else {
                            // Not logged in 
                            return false;
                        }
                } 
                else 
                {
                    // Not logged in 
                    return false;
                }
            } 
            else 
            {
                // Not logged in 
                return false;
            }
        } 
        else 
        {
            // Not logged in 
            return false;
        }
    }

}


?>